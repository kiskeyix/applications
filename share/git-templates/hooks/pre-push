#!/bin/sh
#
# Luis Mondesi <lemsx1@gmail.com>
# License: GPLv3
# 2022-03-23
#
# Conventional Pre-push Git Hook
#
# This script checks pushes before sending them. If this is a Rack application or a chef cookbook
# it will try to run rubocop or cookstyle respectively. It also runs codespell if found.
# You can add ignore words to codespell by creating a file for your directory like:
#   cd ~/Projects/my_repo
#   echo 'ignore_this_word' > ~/.codespell.ignore.$(basename $(pwd))
#
# Runs cookstyle with autocorrect on cookbooks. If corrections are done, they are automatically commited.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).
#
# Synopsis
# ln -s `pwd`/share/git-templates ~/.git-templates
# chmod u+x ~/.git-templates/hooks/*
# git config --global init.templatedir '~/.git-templates'
# git config --global core.hooksPath '~/.git-templates/hooks'
#
# Notes:
#   * `git revert` and `git merge` rewrite might not work via commit-msg
#     this is because git calls `git commit -n` by default

remote="$1"
url="$2"

z40=0000000000000000000000000000000000000000

while read local_ref local_sha remote_ref remote_sha
do
	if [ "$local_sha" = $z40 ]
	then
		# Handle delete
		:
	else
		if [ "$remote_sha" = $z40 ]
		then
			# New branch, examine all commits
			range="$local_sha"
		else
			# Update to existing branch, examine new commits
			range="$remote_sha..$local_sha"
		fi

		# Check for WIP commit
		cmd="git rev-list -n 1 --grep '^WIP' "$range""
                commit=$($cmd)
		if [ -n "$commit" ]
		then
                        echo $cmd
                        echo >&2 "Found WIP commit $commit in $local_ref, not pushing (local_sha $local_sha remote_sha $remote_sha range $range)"
                        exit 1
		fi
	fi
done

# cookbooks
codespellargs=""
workdir=$(pwd)
baseworkdir=$(basename $workdir)

if [[ -f 'metadata.rb' ]]; then
    if command -v cookstyle > /dev/null; then
        cookstyle -A recipes attributes spec test
        git commit -m 'fix: auto cookstyle' -a
    else
        echo "Do: gem install cookstyle"
        exit 1
    fi
    if command -v codespell > /dev/null; then
        if [[ -f $HOME/.codespell.ignore.$baseworkdir ]]; then
            codespellargs=" --ignore-words $HOME/.codespell.ignore.$baseworkdir $codespellargs"
        fi
        codespell --config ~/.codespellrc $codespellargs recipes/*
    else
        echo "WARN: codespell missing"
        uname=`uname -s`
        if [[ $uname == "Darwin" ]]; then
            echo "Do: brew install codespell"
        else
            echo "Do: sudo pip3 install codespell"
        fi
    fi
fi

# Ruby on Rails or other Rack-based apps
if [[ -f config.ru ]]; then
    if command -v rubocop > /dev/null; then
        rubocop -l --format simple app lib
        git commit -m 'fix: auto rubocop' -a
    else
        echo "Do: gem install rubocop"
        exit 1
    fi
    if command -v codespell > /dev/null; then
        if [[ -f $HOME/.codespell.ignore.$baseworkdir ]]; then
            codespellargs=" --ignore-words $HOME/.codespell.ignore.$baseworkdir $codespellargs"
        fi
        codespell --config ~/.codespellrc $codespellargs app/*
        codespell --config ~/.codespellrc $codespellargs lib/*
    else
        echo "WARN: codespell missing"
        echo "Do: brew install codespell"
    fi
fi

exit 0
