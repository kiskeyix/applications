#!/bin/sh
#
# Luis Mondesi <lemsx1@gmail.com>
# License: GPLv3
# 2024-05-13
#
# Conventional Pre-push Git Hook
#
# This script checks pushes before sending them. If this is a Rack application or a chef cookbook
# it will try to run rubocop or cookstyle respectively. It also runs codespell if found.
# You can add ignore words to codespell by creating a file for your directory like:
#   cd ~/Projects/my_repo
#   echo 'ignore_this_word' > ~/.codespell.ignore.$(basename $(pwd))
#
# Runs cookstyle with autocorrect on cookbooks. If corrections are done, they are automatically commited.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).
#
# Synopsis
# ln -s `pwd`/share/git-templates ~/.git-templates
# chmod u+x ~/.git-templates/hooks/*
# git config --global init.templatedir '~/.git-templates'
# git config --global core.hooksPath '~/.git-templates/hooks'
#
# Notes:
#   * `git revert` and `git merge` rewrite might not work via commit-msg
#     this is because git calls `git commit -n` by default

remote="$1"
url="$2"

z40=0000000000000000000000000000000000000000

while read local_ref local_sha remote_ref remote_sha
do
	if [ "$local_sha" = $z40 ]
	then
		# Handle delete
		:
	else
		if [ "$remote_sha" = $z40 ]
		then
			# New branch, examine all commits
			range="$local_sha"
		else
			# Update to existing branch, examine new commits
			range="$remote_sha..$local_sha"
		fi

		# Check for WIP commit
		cmd="git rev-list -n 1 --grep '^WIP' "$range""
                commit=$($cmd)
		if [ -n "$commit" ]
		then
                        echo $cmd
                        echo >&2 "Found WIP commit $commit in $local_ref, not pushing (local_sha $local_sha remote_sha $remote_sha range $range)"
                        exit 1
		fi
	fi
done

# when FORCE in use, warn and skip all tests
if (( FORCE == 1 )); then
    echo "WARNING: force settings in place. Remove with: unset FORCE"
    exit 0
fi

# cookbooks
codespellargs=""
workdir=$(pwd)
baseworkdir=$(basename $workdir)

run_cookstyle()
{
    CMD="cookstyle"
    DIRS='recipes attributes'
    if [[ -d spec ]]; then
        DIRS="$DIRS spec"
    fi
    if [[ -d test ]]; then
        DIRS="$DIRS test"
    fi
    if command -v chef > /dev/null; then
        CMD="chef exec $CMD"
    elif command -v cookstyle > /dev/null; then
        CMD="cookstyle"
    else
        # no cookstyle?
        if [[ `uname -s` == "Darwin" ]]; then
            echo "Do: brew install --cask chef-workstation"
        else
            echo "Do: gem install cookstyle"
        fi
        echo "You can also download it directly from: https://docs.chef.io/workstation/install_workstation/"
        exit 1
    fi
    echo "using '$CMD' ($($CMD --version | awk '/Cookstyle/ {print $NF}'))"
    if ! $CMD $DIRS 2>&1; then
        echo "Offenses detected by cookstyle. Fix them with:"
        echo "  $(echo $CMD | sed 's/cookstyle/cookstyle -A/') $DIRS"
        exit 1
    fi
    echo "  * cookstyle no issues"
}

run_codespell()
{
    CMD="codespell --config ~/.codespellrc"
    DIRS=''
    for _dir in recipes app lib; do
        if [[ -d $_dir ]]; then
            DIRS="$_dir/* $DIRS"
        fi
    done
    if command -v codespell > /dev/null; then
        echo "using codespell $(codespell --version)"
        if [[ -f $HOME/.codespell.ignore.$baseworkdir ]]; then
            codespellargs=" --ignore-words $HOME/.codespell.ignore.$baseworkdir $codespellargs"
        fi
        #echo "$CMD $codespellargs $DIRS"
        if ! $CMD $codespellargs $DIRS; then
            echo "Spelling errors detected. Fix them before proceeding"
            echo "Or add them to the ignore file(s): $codespellargs"
            exit 1
        fi
    else
        echo "WARN: codespell missing"
        if [[ `uname -s` == "Darwin" ]]; then
            echo "Do: brew install codespell"
        else
            echo "Do: sudo pip3 install codespell"
        fi
    fi
    echo "  * codespell done"
}

# rubocop can be used inside cookbooks as well as Rails applications
run_rubocop()
{
    CMD='rubocop'
    if command -v chef > /dev/null && ! [[ -f config.ru ]]; then
        CMD="chef exec $CMD"
    elif command -v rubocop > /dev/null; then
        CMD="rubocop"
    else
        # no rubocop?
        if [[ `uname -s` == "Darwin" ]]; then
            echo "Do: brew install --cask chef-workstation"
        else
            echo "Do: gem install cookstyle"
        fi
        echo "You can also download it directly from: https://docs.chef.io/workstation/install_workstation/"
        exit 1
    fi
    DIRS=''
    for _dir in app lib; do
        if [[ -d $_dir ]]; then
            DIRS="$_dir $DIRS"
        fi
    done
    if command -v rubocop > /dev/null; then
        echo using rubocop $(rubocop --version)
        if $CMD --fail-fast -l --format simple $DIRS 2> /dev/null | egrep -q 'offense detected'; then
            echo
            echo "Offenses detected by rubocop. Fix them with:"
            echo "  $(echo $CMD | sed 's/rubocop/rubocop -a/') $DIRS"
            exit 1
        fi
        echo "  * rubocop done"
    else
        if [[ `uname -s` == "Darwin" ]]; then
            echo "Do: brew install --cask chef-workstation"
        else
            echo "Do: gem install rubocop"
        fi
        exit 1
    fi
}

# mypy can be used inside projects with python code
run_mypy()
{
    CMD='mypy'
    if command -v mypy > /dev/null; then
        CMD="mypy"
    else
        if [[ `uname -s` == "Darwin" ]]; then
            echo "Do: brew install python3 mypy"
        else
            echo "Do: apt install ..."
        fi
        echo "You can also download it directly from: https://docs.chef.io/workstation/install_workstation/"
        exit 1
    fi

    # use --verbose when needed
    if $CMD; then
        : nothing
    else
        exit 1
    fi
}

if [[ -f 'metadata.rb' ]]; then
    run_cookstyle
    run_codespell
fi

# Ruby on Rails or other Rack-based apps
if [[ -f config.ru ]]; then
    run_rubocop
    run_codespell
fi

if (( $(find . -name '*.py'|wc -l) > 0 )); then
    run_mypy
fi
exit 0
