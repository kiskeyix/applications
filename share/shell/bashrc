#===============================================================#
# This file is read (normally) by interactive shells only.      #
# Here is the place to define your aliases, functions and       #
# other interactive features like your prompt.                  #
#                                                               #
# This file was designed (originally) for Solaris.              #
# --> Modified for Linux.                                       #
# --> Modified for OS X and all others, including root accounts #
# --> Modified for CygWin on Win32 platforms                    #
#                                                               #
# Unless you are adding generic functionality, there is no need #
# to edit this file, follow the tips below for other ways in    #
# which you can incorporate your own settings in your           #
# environment. Especially if you use this file from a remotely  #
# mounted $HOME                                                 #
#                                                               #
# TIPS:                                                         #
#   * Create a file named "$HOME/.path.setup" to modify         #
#       your PATH variable. The file contains something like    #
#       export PATH=$PATH:/other/path                           #
#   * Create a file named "$HOME/.alias.setup" to modify        #
#       your aliases. The file should contain lines like        #
#       alias vi='vim -c "set ft=dosini" '                      #
#   * Create a file named "$HOME/.bashrc-`hostname` to add host #
#       specific functions and other bashrc related things.     #
#   * Create a file named "$HOME/.profile-`hostname` to add     #
#       host specific environmental variables and other         #
#       profile-related things like:                            #
#       - USE_BASH_COMPLETION=1 to allow bash_completion to load#
#       - DEFAULT_LANGUAGE="en"   Perl likes this               #
#       - DEFAULT_LC_ALL="en_US.utf8"   shells like this        #
#       - DEFAULT_LANG="en_US.utf8"   vim loves this            #
#   * Create a file named "$HOME/.signaturerc" and add your     #
#       host specific signature related variables. See below    #
#       for defaults (and examples)                             #
#                                                               #
# Luis Mondesi   lemsx1 $AT$ gmail ! com                        #
# http://lems.kiskeyix.org/bashrc.tar.bz2                       #
# 2003-04-25 13:46                                              #
# updaed: 2008-02-08 11:24 EST                                  #
#===============================================================#

# if we are not in an interactive shell, that we do nothing
if [[ -z "${PS1:-}" ]]; then return; fi

#-----------------------------------#
#     Source Global Definitions     #
#-----------------------------------#

## signature setup

## variables
NAME="Name"
POSITION="Position"
COMPANY="Domain.com"
PHONE="area.tel.number"
EMAIL="name@domain.com"
URL="http://www.domain.com/"
DEFAULT_QUOTE="This is a quote"

SIGNATURE=0 # should signature be generated?
QUOTE=0     # should we use fortune to generate a quote?
RECODE=0    # should we recode from iso to utf8?
#FORTUNE_ARGS="-s" # default fortune argument. See "man fortune"

## end variables
. "$HOME/.signaturerc"  # contains a per server set of
                        # variables from the ones above
                        # this line
## end signature setup

# ah, fix Cygwin's lack of USER env var
if [[ -z "${USER:-}" ]]; then
    export USER=`/usr/bin/id | /bin/sed 's/uid=[[:digit:]]\+(\([[:alpha:]]\+\)).*/\1/g'`
fi

# pretty print logged in users when you login interactively?
PRINTUSERS=0

## color definitions
red='\e[0;31m'
RED='\e[1;31m'
blue='\e[0;34m'
BLUE='\e[1;34m'
cyan='\e[0;36m'
CYAN='\e[1;36m'
NC='\e[0m'		# No Color

## dircolors fallback to these defaults
LS_COLORS="no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:bd=40;33;01:cd=40;33;01:or=01;05;37;41:mi=01;05;37;41:ex=01;32:*.cmd=01;32:*.exe=01;32:*.bin=01;32:*.com=01;32:*.btm=01;32:*.bat=01;32:*.sh=01;32:*.csh=01;32:*.tar=01;31:*.tgz=01;31:*.tbz2=01;31:*.arc=01;31:*.lha=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.bz=01;31:*.tz=01;31:*.rpm=01;31:*.cpio=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.xbm=01;35:*.xpm=01;35:*.png=01;35:*.tif=01;35:*.tiff=01;35:*.html=00;31:*.tpl=00;31:*.cpp=04;31:*.cc=04;31:*.c++=04;31:*.c=04;31:*.php=04;31:*.php3=04;31:*.js=04;31:*.pl=04;31:*.h=04;35:*.inc=04;35:*.class=04;35:"

## see 'help command' from within an interactive bash session
eval `command dircolors --sh ~/.dir_colors 2> /dev/null`

if [[ "x$TERM" == "xcygwin" ]]; then
    ## switch TERM variable so that Vim and others don't complaint
    export TERM="ansi"
fi

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# enable bash completion in interactive shells
if [[ 1 == $USE_BASH_COMPLETION ]]; then
    if [[ -r "~/Applications/etc/bash_completion" ]]; then
        . ~/Applications/etc/bash_completion
    elif [[ -r "/etc/bash_completion" ]]; then
        . /etc/bash_completion
    elif [[ -r "/usr/local/etc/bash_completion" ]]; then
        . /usr/local/etc/bash_completion
    elif [[ -r "/opt/csw/etc/bash_completion" ]]; then
        . /opt/csw/etc/bash_completion
    elif [[ -r /opt/local/etc/bash_completion ]]; then
        . /opt/local/etc/bash_completion
    elif command -v brew > /dev/null; then
        if [ -f $(brew --prefix)/etc/bash_completion ]; then
            . $(brew --prefix)/etc/bash_completion
        fi
    fi

    ## Completion setup

    if [[ -r "$HOME/.completion.setup" ]]; then
        . "$HOME/.completion.setup"
    fi

    __my_git_complete_heads()
    {
        COMPREPLY=($(compgen -W '$(git for-each-ref --format="%(refname:strip=2)" "refs/heads/*" "refs/heads/*/**")' -- $2))
    }
    for cmd in gitbranchdelete gitbranchrename; do
        complete -F __my_git_complete_heads $cmd
    done
fi

# at this point is a good time to cleanup our PATH from dups
# does not work well on Solaris
if [[ `uname` == "Linux" ]]; then
PATH=`awk -F: '{for(i=1;i<=NF;i++){if(!($i in a)){a[$i];printf s$i;s=":"}}}'<<<$PATH`
export PATH
fi

#---------------------------#
#          FUNCTIONS        #
#---------------------------#

function printusers()
{
    #grep -v $USER | grep -v User | grep -v "load average"
     w \
     | grep -v -e "^$USER" \
     | grep -v -e "^.*load average:.*$" \
     | grep -v -e "USER.*TTY.*FROM.*LOGIN.*IDLE.*JCPU.*PCPU.*WHAT" \
     | awk '{printf ("\t%s on since %s\n", $1, $4)}' - \
     | sort -k 1,1 \
     | cat -n

}

function _exit()	# function to run upon exit of shell
{
    printf -- "${RED}Hasta la vista, $HOSTNAME ${NC}"
}
#trap _exit 0

function cd_pushd()
{
    if [[ -n "$1" ]]; then
        pushd "$1" > /dev/null 2>&1 
    else
        cd ~
    fi
}

#---------------#
#  Shell prompt #
#---------------#

function fastprompt()
{
    unset PROMPT_COMMAND
    case $TERM in
	*term* | rxvt | vt100 )	
	    PS1="\u@\h:\W > \[\033]0;\u@\h:\w\007\]" ;;
	*) 
	    PS1="\u@\h:\W > " ;;
    esac
}


function powerprompt()
{
    _powerprompt() 
    {
        ## trick: first put command in command history, then find it in
        ## the list. TODO find a better way of doing this:
        _LOAD=$(command uptime 2> /dev/null | sed -e "s/.*: \([^,\ ]*\).*/\1/" -e "s/ //g")
        if [[ -z "${_LOAD:-}" ]]; then
            _LOAD="NOLOAD_CMD"
        fi
        if command -v __git_ps1 > /dev/null; then
            _GIT_BRANCH=$(__git_ps1 " (%s)")
        fi
        case $TERM in
            *term* | rxvt* | ansi )
                # changes xterm title and icon to this string.
                # the sequence is ESC]0+string+BELL
                # where ESC is \033 and BELL is \007
                echo -ne "\033]0;${USER}@${HOSTNAME}${_GIT_BRANCH}: ${PWD/$HOME/~}\007" ;;
        esac
    }

    PROMPT_COMMAND=_powerprompt;
    case $TERM in
        *term* | rxvt* | vt100 | ansi )
            PS1="${cyan}[\t - \$_LOAD \u@\h\$_GIT_BRANCH]$NC \w \n\\$> " ;;
            # \[\033]0;[\h/\u] \w\007\]" ;; this creates a problem
            # on Ubuntu 6.06/6.10's Gnome-Terminal. The first 32 (or so)
            # characters typed cause the cursor to re-scan the number
            # of characters from beginning to ending rapidly,
            # causing a weird (ie annoying) visual effect.
            # Now echo -ne '' in _powerprompt fixes this.
        linux )
            PS1="${cyan}[\t - \$_LOAD]$NC\n[\u@\h \#\$_GIT_BRANCH] \w \n\\$> " ;;
        * )
            # sets no terminal title and has no color
            PS1="[\t - \$_LOAD \u@\h\$_GIT_BRANCH] \w \n\\$> " ;;
    esac
}

#fastprompt
powerprompt	# this is the default prompt - might be slow
		# If too slow, use fastprompt instead....

#-------------------#
# Personal Aliases  #
#-------------------#

alias bye='exit'
alias abul='exit'

# git-pull does not cut it for you?
alias gitpull='git fetch origin; git rebase origin;'
# how about git-push?
alias gitpush='git push; git fetch origin; git rebase origin;'
# aliases so whenever you switch SCM you don't need to relearn the commands:
alias vca='git add .'           # think 'commit all'
alias vcb='git branch'
alias vcc='git commit'
alias vcd='git diff'
alias vcm='git merge'
alias vco='git checkout'        # think 'rcs/cvs/svn co'
alias vcp='git pull'            # think 'checkout from remote host'
alias vcr='git pull --rebase'   # think 'checkout from remote host with clean history'
alias vcu='git push'            # think 'update'
alias vcs='git status'          # think 'info'
# This requires ~/.gitconfig to define logline. Example:
# git config --global alias.logline "log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
alias vcl='git logline'
alias vcf='git fsck'
alias vcg='git gc'              # --prune is wrong as default
alias vct='git tag'

alias diff='diff -burN'

# This needs to be done on a per-system basis 
# as this breaks builds for some binaries.
# Libraries are built out-of-order by concurrent make processes
# 2007-10-21 10:15 EDT - LM
#if [[ -z "${CONCURRENCY_LEVEL:-}" ]]; then
#    CONCURRENCY_LEVEL=8
#fi
#alias make="make -j$CONCURRENCY_LEVEL"

# we setup MAKEFLAGS for debian to be able to use
# multiple jobs in make (-j8) and distcc+ccache
# it happens to create problems
# 2005-12-05 01:15 EST - LM
# if [[ ! -z "${MAKEFLAGS:-}" ]]; then
#     alias debuild="debuild -e MAKEFLAGS"
# fi

if command -v apt > /dev/null 2>&1; then
    alias swinstall="sudo apt install"
    alias swremove="sudo apt remove"
    alias swupgrade="sudo apt update; sudo apt upgrade -y"
elif command -v apt-get > /dev/null 2>&1; then
    alias swinstall="sudo apt-get install"
    alias swremove="sudo apt-get remove"
    alias swupgrade="sudo apt-get update; sudo apt-get upgrade -y"
elif command -v yum > /dev/null 2>&1; then
    # assume Fedora
    alias swinstall="sudo yum install"
    alias swremove="sudo yum remove"
    alias swupgrade="sudo yum -y update"
fi

alias ww=printusers

# nifty way to rename files quickly ~/Applications/scripts/rename perl script
# in debian this is /usr/bin/rename
alias lowercase="rename 'y/A-Z/a-z/' *"
alias nospace="rename 's/ /_/g' *"

# I like using 'perl -pe' instead of stupid 'sed' and psed command is a clone of sed. So, we re-define it
alias psed='perl -pe'

if command -v less > /dev/null 2>&1; then
    # less is just better than more
    # no pun intended
    alias more='less'
fi

if command -v grm > /dev/null 2>&1; then
    alias rm='grm -i'
else
    alias rm='rm -i'
fi

_UNAME=`uname -s`
if [[ "Linux" == $_UNAME || "Cygwin" == $_UNAME ]]; then
    alias ls='ls -hF --color' 
elif [[ "Darwin" == $_UNAME ]]; then
    alias ls='ls -GF' 
elif command -v gls > /dev/null 2>&1; then
    alias ls='gls -hF --color'
fi
unset _UNAME

if command -v gcp > /dev/null 2>&1; then
    alias cp='gcp -i'
else
    alias cp='cp -i'
fi

if command -v gmv > /dev/null 2>&1; then
    alias mv='gmv -i'
else
    alias mv='mv -i'
fi

# Ruby 'rake' command can be problematic sometimes, use bundle exec
# if command -v bundle > /dev/null 2>&1; then
#     alias rake='test -f Gemfile && bundle exec rake || rake'
# fi

alias h='history'
alias j='jobs -l'

#alias r='rlogin' # who uses rlogin anymore?

alias which='type -a'

alias ..='cd ..'
#alias path='printf ${PATH//:/\\n}'

#alias print='/usr/bin/lp -o nobanner -d $LPDEST'
#alias pjet='enscript -h -G -fCourier9 -d $LPDEST '

alias du='du -h'
alias df='df -h'

alias lx='ls -lXB'          # B doesn't show files ending with ~
alias lk='ls -lSr'
alias la='ls -lA'           # A doesn't show implied . and .. files
alias lr='ls -lR'
alias lt='ls -ltr'  
alias lm='ls -Al | more'
alias ll='ls -Al | less'

alias background='xv -root -quit -max -rmode 5'

alias ts='tail -f /var/log/syslog'

alias tm='tail -f /var/log/messages'

alias cd='cd_pushd' # keep a stack of all directories visited
                    # use 'popd' to go back in the stack

alias cdclose="eject -t" # close CDROM tray ;-)

# TODO we need to see if vim exists in our PATH first
## Vim baby!
if command -v vim > /dev/null 2>&1; then
    if [[ -f "$HOME/.vim/vimrc" ]]; then
        alias vi='vim -u "$HOME/.vim/vimrc"'
    else
        alias vi='vim'
    fi
fi
## use gvim if exists instead of vim
## and if we are not connected remotely to a system 
## (via ssh)
if [[ -z "$SSH_TTY" && -x "`command -v gvim 2> /dev/null`" ]]; then
    alias vim="gvim"
    if command -v gvimdiff > /dev/null 2>&1; then
        alias vimdiff="gvimdiff"
    fi
elif [[ -z "$SSH_TTY" && -x "`command -v mvim 2> /dev/null`" ]]; then
    alias vim="mvim"
    if command -v mvimdiff > /dev/null 2>&1; then
        alias vimdiff="mvimdiff"
    fi
fi

alias dpkg-buildpackage='dpkg-buildpackage -rfakeroot'

# connect (callup) to a system using a serial cable:
alias connect='cu -l /dev/ttyS0 -s 9600'

# sysadmin tasks:
alias Iostat='iostat -xnczpm 3'
alias Prstat='prstat -mL'

## spelling typos

alias xs='cd'
alias vf='cd'
alias moer='more'
alias moew='more'
alias kk='ll'
alias suod='sudo'

## get aliases for localhost
## format is:
## alias NAME='command'
if [[ -r "$HOME/.alias.setup" ]]; then
    . "$HOME/.alias.setup"
fi

#----------------------#
#       Signature      #
#----------------------#

if [[ -n "$SIGNATURE" && $SIGNATURE -eq 1 ]]; then
    printf -- "--\n----)(----- \
        \n$NAME\n$POSITION\n$COMPANY\n$PHONE \
        \n$EMAIL\n" > "$HOME/.signature"

    if [[ -x "`command -v fortune 2> /dev/null`" && \
        $QUOTE -eq 1 ]]; then
        if [[ -x "`command -v recode 2> /dev/null`" && \
            $RECODE -eq 1 ]]; then
            command fortune ${FORTUNE_ARGS:--s} | \
            command recode -q ISO-8859-1..utf-8 >> "$HOME/.signature";
        else
            command fortune ${FORTUNE_ARGS:--s} >> "$HOME/.signature";
        fi
    else
        echo $DEFAULT_QUOTE >> "$HOME/.signature";
    fi
    printf -- "\n \n $URL" >> "$HOME/.signature"
fi

#----------------------#
#      Print Users     #
#----------------------#

if [[ -n "$PRINTUSERS" && $PRINTUSERS -eq 1 && -n "$PS1" && $SHLVL -gt 0 ]]; then
    printusers
fi

## lastly, read user host-specific entries
HOST_BASHRC="$HOME/.bashrc-$HOSTNAME"
if [[ -r "$HOST_BASHRC" ]]; then
    . $HOST_BASHRC
fi

#----------------------#
#      Freeup memory   #
#----------------------#

unset PRINTUSERS NAME POSITION COMPANY PHONE EMAIL QUOTE DEFAULT_QUOTE DEFAULT_LANG DEFAULT_LC_ALL DEFAULT_LANGUAGE HOST_PROFILE HOST_BASHRC SIGNATURE

# very last thing is to start tmux/screen if needed (login screen shell)
# Start a screen session only if running under SSH
# and not under screen itself
if [[ -n $SSH_TTY ]] && [[ -z $STY ]]; then
    # we favor tmux in UTF-8 mode
    if command -v tmux > /dev/null; then
        if [[ -z $TMUX ]]; then
            # we want to use controlling session if tmux supports it (1.7 and up)
            # if not, fallback to an existing session ('main') or create one non-controlling if older tmux (1.x)
            #
            # Use CTRL+Space s to see other sessions (or CTRL+b s)
            # This setup allows us to open multiple windows to the same server, and
            # have independent input.
            tmux_cmd="tmux -CC -u new -A -s main"$
            if tmux -V|head -1|awk '{print $NF}'|egrep -q '1\.[0-6]+'; then
                if tmux has-session -t main; then
                    tmux_cmd="tmux attach -t main"
                else
                    tmux_cmd="tmux -u new -s main"
                fi
            fi
            $tmux_cmd
            ec=$?
            echo ec=$ec
        fi
    elif command -v screen > /dev/null; then
        #
        # check if we have a screen session running, if not,
        # start a new one and attach to it

        screen -l -a -t "${USER}@${HOSTNAME}${_GIT_BRANCH}" -xRR -S BashSession
    else
        echo "Neither tmux nor screen commands found"
    fi
fi
## EOF ##

